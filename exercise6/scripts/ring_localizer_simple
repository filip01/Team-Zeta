#!/usr/bin/env python
from __future__ import print_function
from tf.transformations import quaternion_from_euler

import sys
import rospy
import dlib
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
import math
from std_msgs.msg import String
#import matplotlib.pyplot as plt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose, Twist
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA


class ring_localizer:
    def __init__(self):
        rospy.init_node('ring_localizer', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # A help variable for holding the dimensions of the image       
        self.dims = (0, 0, 0)


        params = cv2.SimpleBlobDetector_Params() 
    
        # Set Area filtering parameters 
        params.filterByArea = True
        params.minArea = 100
        
        # Set Circularity filtering parameters 
        params.filterByCircularity = True 
        params.minCircularity = 0.6
        
        # Set Convexity filtering parameters 
        params.filterByConvexity = True
        params.minConvexity = 0.2
            
        # Set inertia filtering parameters 
        params.filterByInertia = True
        params.minInertiaRatio = 0
        params.maxInertiaRatio = 1
        
        # Create a detector with the parameters 
        self.detector = cv2.SimpleBlobDetector_create(params) 

        # Marker array object used for showing markers in Rviz
        self.marker_array = MarkerArray()
        self.marker_num = 1

        # Subscribe to the image and/or depth topic
        # self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)
       # self.depth_sub = rospy.Subscriber("/camera/depth/image_raw", Image, self.depth_callback)

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('ring_markers', MarkerArray, queue_size=1000)

        # Object we use for transforming between coordinate frames
        self.tf_buf = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buf)


    def get_pose(self,coords,dist,stamp):
        # Calculate the position of the detected face

        k_f = 554 # kinect focal length in pixels

        x1, x2, y1, y2 = coords

        face_x = self.dims[1] / 2 - (x1+x2)/2.
        face_y = self.dims[0] / 2 - (y1+y2)/2.

        angle_to_target = np.arctan2(face_x,k_f)

        # Get the angles in the base_link relative coordinate system
        x, y = dist*np.cos(angle_to_target), dist*np.sin(angle_to_target)

        ### Define a stamped message for transformation - directly in "base_link"
        #point_s = PointStamped()
        #point_s.point.x = x
        #point_s.point.y = y
        #point_s.point.z = 0.3
        #point_s.header.frame_id = "base_link"
        #point_s.header.stamp = rospy.Time(0)

        # Define a stamped message for transformation - in the "camera rgb frame"
        point_s = PointStamped()
        point_s.point.x = -y
        point_s.point.y = -0.25
        point_s.point.z = x
        point_s.header.frame_id = "camera_rgb_optical_frame"
        point_s.header.stamp = stamp
       
        # Get the point in the "map" coordinate system
        try:
            point_world = self.tf_buf.transform(point_s, "map")
            add = True
            margin = 0.5
            margin1 = 0.1

            for i in range(len(detected_rings)):
                 if detected_rings[i][0] + margin > point_world.point.x and detected_rings[i][0] - margin < point_world.point.x and detected_rings[i][1] + margin > point_world.point.y and detected_rings[i][1] - margin < point_world.point.y and detected_rings[i][2] + margin > point_world.point.z and detected_rings[i][2] - margin < point_world.point.z:
                    # print("face already detected!")
                    add = False
                    break

            # Create a Pose object with the same position
            if add:
                pose = Pose()
        
                if self.ringMargin(last_detected_ring,margin1,point_world) and self.ringMargin(last_detected_ring2,margin1,point_world):
                   
                   pose.position.x = (point_world.point.x + last_detected_ring[0] + last_detected_ring2[0])/3
                   pose.position.y = (point_world.point.y + last_detected_ring[1] + last_detected_ring2[1])/3
                   pose.position.z = (point_world.point.z + last_detected_ring[2] + last_detected_ring2[2])/3
                   print("Ring number ", len(detected_rings)+1," detected at: X:",pose.position.x, " Y:", pose.position.y)
                
                   detected_rings.append([pose.position.x,pose.position.y, pose.position.z])
                else:
                    pose = None
                last_detected_ring2[0] = last_detected_ring[0]
                last_detected_ring2[1] = last_detected_ring[1]
                last_detected_ring2[2] = last_detected_ring[2]   
                last_detected_ring[0] = point_world.point.x
                last_detected_ring[1] = point_world.point.y
                last_detected_ring[2] = point_world.point.z
            else:
                pose = None
        except Exception as e:
            print(e)
            pose = None

        return pose
    
    def ringMargin(self,lastFace, margin, point):
        if lastFace[0] + margin > point.point.x and lastFace[0] - margin < point.point.x and lastFace[1] + margin > point.point.y and lastFace[1] - margin < point.point.y and lastFace[2] + margin> point.point.z and lastFace[2] - margin < point.point.z:
            return True
            
        return False    

    def find_rings(self):

       # print('I got a new image!')
        # Get the next rgb and depth images that are posted from the camera
        try:
            rgb_image_message = rospy.wait_for_message("/camera/rgb/image_raw", Image)
        except Exception as e:
            print(e)
            return 0
        try:
            depth_image_message = rospy.wait_for_message("/camera/depth/image_raw", Image)
        except Exception as e:
            print(e)
            return 0
        #get current velocity
        try:
            velocity = rospy.wait_for_message("/mobile_base/commands/velocity", Twist, timeout=0.05)
            if abs(velocity.angular.z) > 0.8 or abs(velocity.linear.x) > 0.3:
                print("Cannot triangulate face positions when spinning/moving this fast! [", velocity.angular.z,", ", velocity.linear.x, "]")
                return 0
        except Exception as e:
            None
        #if angular velocity is too big do not proceed with detecting faces
       
        

        # Convert the images into a OpenCV (numpy) format
        try:
            rgb_image = self.bridge.imgmsg_to_cv2(rgb_image_message, "bgr8")
        except CvBridgeError as e:
            print(e)

        try:
            depth_image = self.bridge.imgmsg_to_cv2(depth_image_message, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = rgb_image.shape

        # Preprocessing
        gray = cv2.cvtColor(rgb_image, cv2.COLOR_BGR2GRAY)
        img = cv2.equalizeHist(gray)
        height, width = img.shape
        img = img[0:height/2-50, 0:width]


        #thresholdin img
        ret3,th3 = cv2.threshold(img, 70,255,cv2.THRESH_BINARY_INV)

        output = img.copy()
        cv2.waitKey(1)
        image_scale = rgb_image.shape[1]
        
        #smallImage = cv2.resize(gray, (int(rgb_image.shape[1] / image_scale), int(rgb_image.shape[0] / image_scale)), interpolation=cv2.INTER_LINEAR)
        #smallImage = cv2.equalizeHist(smallImage)
        cv2.imshow("A", rgb_image)
        cv2.imshow("AS", np.hstack([img, th3]))

        kp = self.detector.detect(th3)

        blank = np.zeros((1, 1))  
        blobs = cv2.drawKeypoints(img, kp, blank, (0, 0, 255), 
                                cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS) 
        
        # Show blobs 
        cv2.imshow("Filtering Circular Blobs Only", blobs) 

        pts = cv2.KeyPoint_convert(kp)
        
        for i in range(0, len(kp)): 
            
            x = int(pts[i][0])
            y = int(pts[i][1])
            r = int(kp[i].size*2/3)

            y1 = y - r
            y2 = y + r
            x1 = x - r
            x2 = x + r

            
            if(r < 50 and y1>0 and y2 <height/2 and x1 >0 and x2 < width):
                cv2.imshow("ASf", img[y1:y2, x1:x2])
                ring_distance_top = float(np.nanmean(depth_image[y-r:y,x-r:x+r]))
                ring_distance_bot = float(np.nanmean(depth_image[y:y+r,x-r:x+r]))
                if(ring_distance_top - ring_distance_bot < 0.01):
                    ring_distance = (ring_distance_top + ring_distance_bot)/2
                    if(ring_distance > 0.75):
                        depth_time = depth_image_message.header.stamp
                        pose = self.get_pose((x1,x2,y1,y2), ring_distance, depth_time)
                        if pose is not None:
                            # Create a marker used for visualization
                            self.marker_num += 1
                            marker = Marker()
                            marker.header.stamp = rospy.Time(0)
                            marker.header.frame_id = 'map'
                            marker.pose = pose
                            marker.type = Marker.SPHERE
                            marker.action = Marker.ADD
                            marker.frame_locked = False
                            marker.lifetime = rospy.Duration.from_sec(0)
                            marker.id = self.marker_num
                            marker.scale = Vector3(0.1, 0.1, 0.1)
                            marker.color = ColorRGBA(1, 0, 1, 1)
                            self.marker_array.markers.append(marker)
                            self.markers_pub.publish(self.marker_array)

    def depth_callback(self,data):

        try:
            depth_image = self.bridge.imgmsg_to_cv2(data, "32FC1")
        except CvBridgeError as e:
            print(e)

        # Do the necessairy conversion so we can visuzalize it in OpenCV
        
        image_1 = depth_image / np.nanmax(depth_image)
        image_1 = image_1*255
        
        image_viz = np.array(image_1, dtype=np.uint8)

        cv2.imshow("Depth window", image_viz)
        cv2.waitKey(1)

        #plt.imshow(depth_image)
        #plt.show()

def main():

        global detected_rings   
        detected_rings = []
        global last_detected_ring
        last_detected_ring = [0, 0, 0]
        global last_detected_ring2
        last_detected_ring2 = [0, 0, 0]

        ring_finder = ring_localizer()
           
        rate = rospy.Rate(10)
        print("ring localization started!")
        while not rospy.is_shutdown():
            ring_finder.find_rings()
            rate.sleep()

        cv2.destroyAllWindows()


if __name__ == '__main__':
    main()
