#!/usr/bin/env python
from __future__ import print_function

import roslib
# roslib.load_manifest('exercise4')
import sys
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from std_msgs.msg import ColorRGBA

import pyzbar.pyzbar as pyzbar

class The_QRer:
    def __init__(self):
        rospy.init_node('image_converter', anonymous=True)

        # An object we use for converting images between ROS format and OpenCV format
        self.bridge = CvBridge()

        # Subscribe to the image and/or depth topic
        self.image_sub = rospy.Subscriber("/camera/rgb/image_raw", Image, self.image_callback)

    def image_callback(self,data):
        # print('Iam here!')

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        # Set the dimensions of the image
        self.dims = cv_image.shape

        ###########################################
        #### This is relevant for exercise 8
        ###########################################
        
        # Find a QR code in the image
        decodedObjects = pyzbar.decode(cv_image)
            
        #print(decodedObjects)
        
        if len(decodedObjects) == 1:
            dObject = decodedObjects[0]
            print("Found 1 QR code in the image!")
            print("Data: ", dObject.data,'\n')
            
            # Visualize the detected QR code in the image
            points  = dObject.polygon
            if len(points) > 4 : 
                hull = cv2.convexHull(np.array([point for point in points], dtype=np.float32))
                hull = list(map(tuple, np.squeeze(hull)))
            else : 
                hull = points;
             
            ## Number of points in the convex hull
            n = len(hull)
         
            ## Draw the convext hull
            for j in range(0,n):
                cv2.line(cv_image, hull[j], hull[ (j+1) % n], (0,255,0), 2)
         
        elif len(decodedObjects)==0:
            print("No QR code in the image")
        else:
            print("Found more than 1 QR code")

        cv2.imshow('image', cv_image)
        cv2.waitKey(1)
            

def main(args):

    qr_finder = The_QRer()

    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

    cv2.destroyAllWindows()


if __name__ == '__main__':
    main(sys.argv)
